"use strict";

const fs = require("fs");
const path = require("path");

const SEVERITY_RANK = { critical: 5, high: 4, medium: 3, low: 2, info: 1 };
const CONFIDENCE_SCORE = { high: 0.85, medium: 0.6, low: 0.35 };

function severityToConfidenceLabel(severity) {
  const s = String(severity || "info").toLowerCase();
  if (s === "critical" || s === "high") return "high";
  if (s === "medium") return "medium";
  return "low";
}

function toConfidenceScore(confidence, severity) {
  if (typeof confidence === "number") return confidence;
  const label = (confidence || "").toString().toLowerCase();
  if (CONFIDENCE_SCORE[label] != null) return CONFIDENCE_SCORE[label];
  // fallback: derive from severity
  return CONFIDENCE_SCORE[severityToConfidenceLabel(severity)] || 0.2;
}

function simplifyFindings(findings) {
  return (findings || []).map((f) => {
    const severity = (f.severity || "info").toLowerCase();
    // Choose label: if provided as string, use it; else derive from severity
    let label = f && typeof f.confidence === "string" ? f.confidence.toLowerCase() : severityToConfidenceLabel(severity);
    // Normalize to known labels
    if (!['high','medium','low'].includes(label)) label = severityToConfidenceLabel(severity);
    return {
      check: f.check || "",
      id: f.id || "",
      severity,
      title: f.title || f.message || "",
      file: (Array.isArray(f.locations) && f.locations[0] && f.locations[0].file) ? f.locations[0].file : "",
      confidence: label
    };
  });
}

function topFindings(findings, n = 10) {
  const arr = findings.slice();
  arr.sort((a, b) => {
    const ra = SEVERITY_RANK[a.severity] || 0;
    const rb = SEVERITY_RANK[b.severity] || 0;
    if (rb !== ra) return rb - ra;
    const sa = toConfidenceScore(a.confidence, a.severity);
    const sb = toConfidenceScore(b.confidence, b.severity);
    return sb - sa;
  });
  return arr.slice(0, n);
}

function htmlEscape(s) {
  return String(s || "").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
}

function renderHtmlActionBoard(findingsTop, fullList, stateObj) {
  const rows = findingsTop.length
    ? findingsTop.map(f => `
        <tr>
          <td class="sev sev-${htmlEscape(f.severity)}">${htmlEscape(f.severity)}</td>
          <td>${htmlEscape(f.title)}</td>
          <td>${htmlEscape(f.file)}</td>
          <td class="conf conf-${htmlEscape(f.confidence)}" title="${toConfidenceScore(f.confidence, f.severity).toFixed(2)}">${htmlEscape(f.confidence)}</td>
          <td><code>${htmlEscape(f.id)}</code></td>
        </tr>`).join("\n")
    : '<tr><td colspan="5" class="empty">No findings</td></tr>';

  return `<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Quality Lab — Action Board</title>
  <style>
    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif; margin: 24px; }
    h1 { font-size: 20px; margin: 0 0 12px; }
    .meta { color: #666; margin-bottom: 16px; }
    table { border-collapse: collapse; width: 100%; }
    th, td { border: 1px solid #ddd; padding: 8px; font-size: 14px; }
    th { background: #f7f7f7; text-align: left; }
    .sev { font-weight: 600; text-transform: capitalize; }
    .sev-critical { color: #b00020; }
    .sev-high { color: #c62828; }
    .sev-medium { color: #ef6c00; }
    .sev-low { color: #2e7d32; }
    .sev-info { color: #1565c0; }
    .empty { text-align: center; color: #777; }
    .conf-high { color: #2e7d32; font-weight: 600; }
    .conf-medium { color: #ef6c00; font-weight: 600; }
    .conf-low { color: #b00020; font-weight: 600; }
    code { background: #fafafa; padding: 2px 4px; border-radius: 4px; }
    .controls { margin: 16px 0; display: flex; gap: 12px; align-items: center; flex-wrap: wrap; }
    select, button { padding: 6px 10px; }
    .table-wrap { overflow: auto; max-height: 70vh; border: 1px solid #eee; }
    .state { text-transform: capitalize; font-weight: 600; }
    .state-accepted { color: #1565c0; }
    .state-false_positive { color: #757575; }
    .state-snoozed { color: #6d4c41; }
    .actions button { margin-right: 6px; }
  </style>
  <meta name="robots" content="noindex" />
  <meta http-equiv="Content-Security-Policy" content="default-src 'none'; style-src 'unsafe-inline'; img-src data:;" />
  <meta name="referrer" content="no-referrer" />
  <meta name="color-scheme" content="light dark" />
  <meta name="generator" content="qualitylab" />
  <meta name="description" content="Top 10 actionable findings" />
  <meta charset="utf-8" />
  </head>
<body>
  <h1>Action Board — Top 10</h1>
  <div class="meta">Generated by Quality Lab</div>
  <div class="controls">
    <label>Severity <select id="sev-filter"><option value="">All</option><option>critical</option><option>high</option><option>medium</option><option>low</option><option>info</option></select></label>
    <label>Confidence <select id="conf-filter"><option value="">All</option><option>high</option><option>medium</option><option>low</option></select></label>
    <label>State <select id="state-filter"><option value="">All</option><option value="active">Active</option><option value="accepted">Accepted</option><option value="false_positive">False Positive</option><option value="snoozed">Snoozed</option></select></label>
    <button id="download-state">Download State JSON</button>
    <button id="download-tickets">Download Tickets JSON</button>
  </div>
  <div class="table-wrap">
  <table>
    <thead>
      <tr>
        <th>Severity</th>
        <th>Title</th>
        <th>File</th>
        <th>Confidence</th>
        <th>ID</th>
        <th>State</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      ${rows}
    </tbody>
  </table>
  </div>
  <script>
  const DATA = ${JSON.stringify(fullList)};
  const STATE = ${JSON.stringify(stateObj || { entries: {} })};
  const entries = STATE.entries || {};

  function keyOf(f) { return [f.check||'', f.id||'', f.file||''].join('|'); }
  function currentState(key) {
    const e = entries[key];
    if (!e) return { label: 'active' };
    if (e.snoozed_until && new Date(e.snoozed_until) > new Date()) return { label: 'snoozed', until: e.snoozed_until };
    if (e.state === 'false_positive') return { label: 'false_positive' };
    if (e.state === 'accepted') return { label: 'accepted', ticket: e.ticket };
    return { label: 'active' };
  }

  function renderRow(f) {
    const key = keyOf(f);
    const st = currentState(key);
    const stateCell = '<span class="state state-' + st.label + '">' + st.label + (st.until ? (' ('+st.until+')') : '') + '</span>';
    var s = '';
    s += '<tr data-key="'+key+'" data-sev="'+f.severity+'" data-conf="'+f.confidence+'" data-state="'+st.label+'">';
    s += '<td class="sev sev-'+f.severity+'">'+f.severity+'</td>';
    s += '<td>'+escapeHtml(f.title)+'</td>';
    s += '<td>'+escapeHtml(f.file)+'</td>';
    s += '<td class="conf conf-'+f.confidence+'">'+f.confidence+'</td>';
    s += '<td><code>'+escapeHtml(f.id)+'</code></td>';
    s += '<td class="state-cell">'+stateCell+'</td>';
    s += '<td class="actions">'+
         '<button data-act="accept">Accept → Ticket</button>'+
         '<button data-act="false">False Positive</button>'+
         '<button data-act="snooze">Snooze 7d</button>'+
         '</td>';
    s += '</tr>';
    return s;
  }

  function escapeHtml(s){return String(s||'').replace(/[&<>"']/g,c=>({"&":"&amp;","<":"&lt;",">":"&gt;","\"":"&quot;","'":"&#39;"}[c]));}

  function applyFilters() {
    const sev = document.getElementById('sev-filter').value;
    const conf = document.getElementById('conf-filter').value;
    const st = document.getElementById('state-filter').value;
    const tbody = document.querySelector('tbody');
    tbody.innerHTML = '';
    let list = DATA.slice();
    // Default sort: severity desc, then confidence
    const sevRank = {critical:5,high:4,medium:3,low:2,info:1};
    const confRank = {high:3,medium:2,low:1};
    list.sort((a,b)=> (sevRank[b.severity]-sevRank[a.severity]) || (confRank[b.confidence]-confRank[a.confidence]));
    for (const f of list) {
      const key = keyOf(f);
      const cur = currentState(key);
      if (sev && f.severity !== sev) continue;
      if (conf && f.confidence !== conf) continue;
      if (st) {
        if (st === 'active' && cur.label !== 'active') continue;
        if (st !== 'active' && cur.label !== st) continue;
      }
      tbody.insertAdjacentHTML('beforeend', renderRow(f));
    }
  }

  function acceptFinding(key) {
    const ticket = prompt('Enter ticket id (optional):');
    entries[key] = { key, state: 'accepted', ticket: ticket ? { id: ticket } : undefined };
  }
  function falsePositive(key) {
    entries[key] = { key, state: 'false_positive' };
  }
  function snooze7d(key) {
    const until = new Date(Date.now() + 7*24*60*60*1000).toISOString();
    entries[key] = { key, state: 'snoozed', snoozed_until: until };
  }

  function onAction(e) {
    const btn = e.target.closest('button');
    if (!btn) return;
    const tr = e.target.closest('tr');
    const key = tr && tr.getAttribute('data-key');
    if (!key) return;
    if (btn.dataset.act === 'accept') acceptFinding(key);
    if (btn.dataset.act === 'false') falsePositive(key);
    if (btn.dataset.act === 'snooze') snooze7d(key);
    applyFilters();
  }

  function download(filename, text) {
    const a = document.createElement('a');
    a.href = URL.createObjectURL(new Blob([text], {type: 'application/json'}));
    a.download = filename;
    a.click();
    setTimeout(()=>URL.revokeObjectURL(a.href), 5000);
  }

  function buildStatePayload() {
    return JSON.stringify({ entries }, null, 2);
  }

  function buildTicketsPayload() {
    const items = [];
    for (const [key, v] of Object.entries(entries)) {
      if (v && v.state === 'accepted') {
        const [check,id,file] = key.split('|');
        items.push({ key, check, id, file, ticket: v.ticket||null, createdAt: new Date().toISOString() });
      }
    }
    return JSON.stringify({ tickets: items }, null, 2);
  }

  document.addEventListener('change', (e)=>{
    if (e.target && (e.target.id==='sev-filter' || e.target.id==='conf-filter' || e.target.id==='state-filter')) applyFilters();
  });
  document.addEventListener('click', onAction);

  document.getElementById('download-state').addEventListener('click', ()=>{
    download('state.json', buildStatePayload());
  });
  document.getElementById('download-tickets').addEventListener('click', ()=>{
    download('tickets.json', buildTicketsPayload());
  });

  applyFilters();
  </script>
</body>
</html>`;
}

function ensureDir(dir) {
  if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
}

function writeReport(outDir, simplifiedFindings, fullReport, stateObj) {
  ensureDir(outDir);
  const jsonPath = path.join(outDir, "findings.json");
  const htmlPath = path.join(outDir, "index.html");
  fs.writeFileSync(jsonPath, JSON.stringify(simplifiedFindings, null, 2) + "\n", "utf8");
  const html = renderHtmlActionBoard(topFindings(simplifiedFindings, 10), simplifiedFindings, stateObj || { entries: {} });
  fs.writeFileSync(htmlPath, html, "utf8");
  // Also write a copy of state into the report folder for convenience
  if (stateObj) {
    const statePath = path.join(outDir, "state.json");
    try { fs.writeFileSync(statePath, JSON.stringify(stateObj, null, 2) + "\n", "utf8"); } catch {}
  }
  return { jsonPath, htmlPath };
}

module.exports = {
  simplifyFindings,
  topFindings,
  renderHtmlActionBoard,
  writeReport,
};
